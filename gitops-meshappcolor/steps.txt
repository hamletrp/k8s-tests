
aws appmesh deprecated 
---
    helm show values istio/base

---
install istio 
    k apply -f ./argocd-apps/namespaces.yaml
    k apply -f ./argocd-apps/service-accounts.yaml
    k apply -f ./argocd-apps/apps/istio.yaml

install gateways crds  
    kubectl get crd gateways.gateway.networking.k8s.io &> /dev/null || \
    { kubectl kustomize "github.com/kubernetes-sigs/gateway-api/config/crd?ref=v1.26.1" | kubectl apply -f -; }

--- 
test app 
    label the namespace for automatic istio injection 
        kubectl label namespace default istio-injection=enabled

    deploy the app 
        kubectl apply -f https://raw.githubusercontent.com/istio/istio/release-1.26/samples/bookinfo/platform/kube/bookinfo.yaml

    patch deploys to tolerate 
        kubectl patch deployment/details-v1 -n default --type='json' -p='[{"op": "add", "path": "/spec/template/spec/tolerations", "value": [{"key": "workload-type","operator": "Equal","value": "regular","effect": "NoSchedule"}]}]'
        kubectl patch deployment/productpage-v1 -n default --type='json' -p='[{"op": "add", "path": "/spec/template/spec/tolerations", "value": [{"key": "workload-type","operator": "Equal","value": "regular","effect": "NoSchedule"}]}]'
        kubectl patch deployment/ratings-v1 -n default --type='json' -p='[{"op": "add", "path": "/spec/template/spec/tolerations", "value": [{"key": "workload-type","operator": "Equal","value": "regular","effect": "NoSchedule"}]}]'
        kubectl patch deployment/reviews-v1 -n default --type='json' -p='[{"op": "add", "path": "/spec/template/spec/tolerations", "value": [{"key": "workload-type","operator": "Equal","value": "regular","effect": "NoSchedule"}]}]'
        kubectl patch deployment/reviews-v2 -n default --type='json' -p='[{"op": "add", "path": "/spec/template/spec/tolerations", "value": [{"key": "workload-type","operator": "Equal","value": "regular","effect": "NoSchedule"}]}]'
        kubectl patch deployment/reviews-v3 -n default --type='json' -p='[{"op": "add", "path": "/spec/template/spec/tolerations", "value": [{"key": "workload-type","operator": "Equal","value": "regular","effect": "NoSchedule"}]}]'

    Create an Istio Gateway 
        gtw 
            k apply -f ./gitops-meshappcolor/colorapp/gateway/gateway.yaml
        virtual svc 
            k apply -f ./gitops-meshappcolor/colorapp/istio-virtual-service/virtual-service.yaml

    set this env vars
        export INGRESS_NAME=istio-ingressgateway
        export INGRESS_NS=istio-system
        export INGRESS_HOST=$(kubectl -n "$INGRESS_NS" get service "$INGRESS_NAME" -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
        export INGRESS_PORT=$(kubectl -n "$INGRESS_NS" get service "$INGRESS_NAME" -o jsonpath='{.spec.ports[?(@.name=="http2")].port}')
        export GATEWAY_URL=$INGRESS_HOST:$INGRESS_PORT

    apply the destination rules 
        k apply -f ./gitops-meshappcolor/colorapp/istio-desti-rules/destination-rule-all.yaml




    
