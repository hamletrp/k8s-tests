---
aws appmesh deprecated 
---

3️⃣ Install Istio CRDs + Istio control plane
4️⃣ Deploy Istio ingress gateway
5️⃣ Enable Gateway API (modern or clasic)

6️⃣ Configure workloads to be mesh-enabled
7️⃣ Observe with Kiali, Jaeger, Prometheus

---
    helm show values istio/base
---

install gateways crds  
    kubectl get crd gateways.gateway.networking.k8s.io &> /dev/null || \
    kubectl apply -f https://github.com/kubernetes-sigs/gateway-api/releases/download/v1.3.0/standard-install.yaml
install istio 
    k apply -f ./argocd-apps/namespaces.yaml
    k apply -f ./argocd-apps/service-accounts.yaml
    k apply -f ./argocd-apps/apps/istio.yaml

set gatewayClass, gateway and HTTPRoute
    # no need to run - istio chart installs it
        k apply -f ./gitops-meshappcolor/gateway-classes/istio.yaml

    using Gateway API
        Gateway → HTTPRoute → Backend Service
    
    using Istio Gateway + VirtualService
        Istio Gateway → VirtualService → Backend Service

    register certificate 
        k delete -f ./gitops-meshappcolor/gateways-and-routes/doordress.us.cert.yaml
        k apply -f ./gitops-meshappcolor/gateways-and-routes/doordress.us.cert.yaml

    apply configmap and gateway
        k delete -f ./gitops-meshappcolor/gateways-and-routes/istio-gateway-1.yaml
        k apply -f ./gitops-meshappcolor/gateways-and-routes/istio-gateway-1.yaml
    
    apply routes
        k delete -f ./gitops-meshappcolor/gateways-and-routes/istio-httproute-1.yaml
        k apply -f ./gitops-meshappcolor/gateways-and-routes/istio-httproute-1.yaml
    
--- 
test app 
    label the namespace for automatic istio injection 
        kubectl label namespace default istio-injection=enabled

    deploy the app 
        kubectl -n istio-system apply -f https://raw.githubusercontent.com/istio/istio/release-1.26/samples/bookinfo/platform/kube/bookinfo.yaml

    patch deploys to tolerate 
        kubectl patch deployment/details-v1 -n istio-system --type='json' -p='[{"op": "add", "path": "/spec/template/spec/tolerations", "value": [{"key": "workload-type","operator": "Equal","value": "regular","effect": "NoSchedule"}]}]' \
        && kubectl patch deployment/productpage-v1 -n istio-system --type='json' -p='[{"op": "add", "path": "/spec/template/spec/tolerations", "value": [{"key": "workload-type","operator": "Equal","value": "regular","effect": "NoSchedule"}]}]' \
        && kubectl patch deployment/ratings-v1 -n istio-system --type='json' -p='[{"op": "add", "path": "/spec/template/spec/tolerations", "value": [{"key": "workload-type","operator": "Equal","value": "regular","effect": "NoSchedule"}]}]' \
        && kubectl patch deployment/reviews-v1 -n istio-system --type='json' -p='[{"op": "add", "path": "/spec/template/spec/tolerations", "value": [{"key": "workload-type","operator": "Equal","value": "regular","effect": "NoSchedule"}]}]' \
        && kubectl patch deployment/reviews-v2 -n istio-system --type='json' -p='[{"op": "add", "path": "/spec/template/spec/tolerations", "value": [{"key": "workload-type","operator": "Equal","value": "regular","effect": "NoSchedule"}]}]' \
        && kubectl patch deployment/reviews-v3 -n istio-system --type='json' -p='[{"op": "add", "path": "/spec/template/spec/tolerations", "value": [{"key": "workload-type","operator": "Equal","value": "regular","effect": "NoSchedule"}]}]'

    Create an Istio Gateway 
        gtw 
            k apply -f ./gitops-meshappcolor/colorapp/istio-gateway/gateway.yaml
        virtual svc 
            k apply -f ./gitops-meshappcolor/colorapp/istio-virtual-service/virtual-service.yaml

    set this env vars
        export INGRESS_NAME=istio-ingressgateway
        export INGRESS_NS=istio-system
        export INGRESS_HOST=$(kubectl -n "$INGRESS_NS" get service "$INGRESS_NAME" -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
        export INGRESS_PORT=$(kubectl -n "$INGRESS_NS" get service "$INGRESS_NAME" -o jsonpath='{.spec.ports[?(@.name=="http2")].port}')
        export GATEWAY_URL=$INGRESS_HOST:$INGRESS_PORT

    apply the destination rules 
        k apply -f ./gitops-meshappcolor/colorapp/istio-desti-rules/destination-rule-all.yaml






--- 
samples 

Gateway (if using classic Istio networking.istio.io Gateway)

    Gateway
        apiVersion: networking.istio.io/v1beta1
        kind: Gateway
        metadata:
        name: my-gateway
        namespace: istio-ingress
        spec:
        selector:
            istio: ingressgateway
        servers:
            - port:
                number: 80
                name: http
                protocol: HTTP
            hosts:
                - "*"

    VirtualService
        apiVersion: networking.istio.io/v1beta1
        kind: VirtualService
        metadata:
        name: my-virtualservice
        namespace: my-app
        spec:
        gateways:
            - istio-ingress/my-gateway
        hosts:
            - "*"
        http:
            - match:
                - uri:
                    prefix: /
            route:
                - destination:
                    host: my-app-service
                    port:
                    number: 80


modern example using the Gateway API (gateways.networking.k8s.io) 
→ this is the new preferred model.

    GatewayClass
        apiVersion: gateway.networking.k8s.io/v1
        kind: GatewayClass
        metadata:
            name: istio
        spec:
            controllerName: istio.io/gateway-controller

    Gateway (instantiates an ingress gateway)
        apiVersion: gateway.networking.k8s.io/v1
        kind: Gateway
        metadata:
            name: my-istio-gateway
            namespace: istio-ingress
        spec:
            gatewayClassName: istio
            listeners:
                - name: http
                  port: 80
                  protocol: HTTP
                  hostname: "myapp.example.com"  # Optional, can be "*" for all hosts


    HTTPRoute (routes traffic through the Gateway)
        apiVersion: gateway.networking.k8s.io/v1
        kind: HTTPRoute
        metadata:
            name: myapp-route
            namespace: my-app-namespace
        spec:
            parentRefs:
                - name: my-istio-gateway
                  namespace: istio-ingress
            hostnames:
                - "myapp.example.com"
            rules:
                - matches:
                    - path:
                        type: PathPrefix
                        value: /
                  backendRefs:
                    - name: myapp-service
                      port: 80


    Gateway (TLS termination enabled)
        apiVersion: gateway.networking.k8s.io/v1
        kind: Gateway
        metadata:
            name: my-istio-gateway
            namespace: istio-ingress
        spec:
            gatewayClassName: istio
            listeners:
                - name: https
                port: 443
                protocol: HTTPS
                hostname: "myapp.example.com"
                tls:
                    mode: Terminate
                    certificateRefs:
                    - kind: Secret
                        name: myapp-tls-secret
                        namespace: istio-ingress
    
