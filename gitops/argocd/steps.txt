Manual install 
    ArgoCD install 
    https://github.com/devopsjourney1/argo-examples/blob/master/readme.md
        k create namespace argocd
        k apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
        
        k delete -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml

        clear && k get pods -n argocd
    
        check the service 
            k get service/argocd-server -n argocd

        port forwarding
            k port-forward service/argocd-server -n argocd 9000:443

        htpasswd -bnBC 10 "" 'mySuperSecurepwd' | tr -d ':\n'
            $2y$10$G2uFnx9qn.7HxGOhc51W8.FWVJz.riTIyalc0qymMqtR.xQ8iKY3.

        aws secretsmanager put-secret-value \
        --secret-id argocd-admin-secret \
        --region us-east-1 \
        --secret-string '{
            "admin.password": "$2y$10$G2uFnx9qn.7HxGOhc51W8.FWVJz.riTIyalc0qymMqtR.xQ8iKY3.",
            "admin.passwordMtime": "2025-06-04T11:00:00Z"
        }'

        to register external secrets 
                k apply -f ./gitops/argocd/argocd-admin-pwd-secretmngr.yaml

        get admin pwd 
            k -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d; echo
            k -n argocd get secret argocd-secret -o jsonpath="{.data.password}" | base64 -d; echo

        Ingress setup 
            nginx 
                HTTPS 
                    nginx must be properly setup
                    to register ingress object 
                        k apply -f ./gitops/argocd/argocd-ingress.yaml
                        k apply -f ./gitops/argocd/argocd-ingress-alb.yaml
                        

                    if not valid certificate 
                        k -n argocd patch deployment argocd-server \
                        --type='json' \
                        -p='[{"op": "add", "path": "/spec/template/spec/containers/0/args/-", "value": "--insecure"}]'


                HTTP 
                    # non-https requires to ask argo to allow insecure
                    k -n argocd patch deployment argocd-server \
                    --type='json' \
                    -p='[{"op": "add", "path": "/spec/template/spec/containers/0/args/-", "value": "--insecure"}]'

                    then check the config 
                        k -n argocd get deployment argocd-server -o jsonpath='{.spec.template.spec.containers[0].args}'

                    or revert it 
                        k -n argocd patch deployment argocd-server \
                        --type=json \
                        -p='[{"op": "remove", "path": "/spec/template/spec/containers/0/args/0"}]'


                        k -n argocd patch deployment argocd-server \
                        --type='json' \
                        -p='[{"op": "add", "path": "/spec/template/spec/containers/0/args/-", "value": "/usr/local/bin/argocd-server"}]'
        
        log int argo cli 
            argocd login localhost:9000 --username admin --password mySuperSecurepwd --insecure
            argocd login argocd.doordress.us:8080 --username admin --password XkvF7fiXa9j5O-LC --insecure


pending to test thru the app
    run aws-certs-provisioning.txt
    update values.yaml
    deploy 

    Set HTTPS 
        Install Cert-Manager
            k apply -f https://github.com/cert-manager/cert-manager/releases/latest/download/cert-manager.yaml

        Create a ClusterIssuer (for Letâ€™s Encrypt)
            k apply -f ./gitops/argocd-ingress/ClusterIssuer.yaml

        ---
        NGINX Controller Setup 
            ingress-ctrler-setup.txt

