
Install nginx ingress controller 
  k apply -f ./gitops/nginx/nginx-argocd-app.yaml


if HTTP 
  # non-https requires to ask argo to allow insecure
  k -n argocd patch deployment argocd-server \
  --type='json' \
  -p='[{"op": "add", "path": "/spec/template/spec/containers/0/args/-", "value": "--insecure"}]'

  then check the config 
    kubectl -n argocd get deployment argocd-server -o jsonpath='{.spec.template.spec.containers[0].args}'

  or revert it 
    kubectl -n argocd patch deployment argocd-server \
    --type=json \
    -p='[{"op": "remove", "path": "/spec/template/spec/containers/0/args/0"}]'


HTTPS 
  to provission role eks_alb_controller_irsa_role
  to annotate serviceaccount nginx-ingress-ingress-nginx and set eks.amazonaws.com/role-arn
    annotate-serv-acc-nginx-ingress.sh
  tp annotate service nginx-ingress-ingress-nginx-controller  
    annotate-service-nginx-ingress.sh


Apply any ingress object 
  e.g: 
    k apply -f ./gitops/argocd/argocd-ingress.yaml

Update the hostedzone records 
  map domain to nginx LoadBalancer endpoint 
  e.g route53
    CNAME
    argocd.doordress.us : a12cbb480f36c41519138c7586af129d-660904573.us-east-1.elb.amazonaws.com 
    
    and for wildcards
    *.doordress.us : a12cbb480f36c41519138c7586af129d-660904573.us-east-1.elb.amazonaws.com 


TOOLS
  check cert validity
    echo | openssl s_client -connect argocd.doordress.us:443 -servername argocd.doordress.us
    curl -vvvvv https://argcd.doordress.us

  kubectl get service nginx-ingress-ingress-nginx-controller -n ingress-nginx -o jsonpath="{.metadata.annotations}"

  aws acm describe-certificate --certificate-arn arn:aws:acm:...

  dig +short argocd.doordress.us


